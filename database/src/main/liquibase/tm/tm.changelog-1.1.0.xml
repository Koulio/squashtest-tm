<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) 2010 - 2011 Squashtest TM, Squashtest.org

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->

<!-- That changelog will simplify the acl groups, by triming them to what is actually supported by the app as for 0.23.0. -->

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

	<changeSet id="tm-1.1.0.01" author="gfouquet">
		<comment>Corrects status to BLOCKED in EXECUTION table</comment>
		<update tableName="EXECUTION">
			<column name="EXECUTION_STATUS" value="BLOCKED" />
			<where>EXECUTION_STATUS='BLOQUED'</where>
		</update>
	</changeSet>

	<changeSet id="tm-1.1.0.02" author="gfouquet">
		<comment>Corrects status to BLOCKED in EXECUTION_STEP table</comment>
		<update tableName="EXECUTION_STEP">
			<column name="EXECUTION_STATUS" value="BLOCKED" />
			<where>EXECUTION_STATUS='BLOQUED'</where>
		</update>
	</changeSet>

	<changeSet id="tm-1.1.0.03" author="gfouquet">
		<comment>Corrects status to BLOCKED in EXECUTION_STEP table</comment>
		<update tableName="ITERATION_TEST_PLAN_ITEM">
			<column name="EXECUTION_STATUS" value="BLOCKED" />
			<where>EXECUTION_STATUS='BLOQUED'</where>
		</update>
	</changeSet>
	
	<changeSet id="tm-1.1.0.04" author="bsiri">
		<comment>Adds a status to the requirements</comment>
		<addColumn tableName="REQUIREMENT" >
			<column name="REQUIREMENT_STATUS" type="java.sql.Types.VARCHAR(255)" 
			defaultValue="WORK_IN_PROGRESS" />
		</addColumn>	
	</changeSet>
	
	<changeSet id="tm-1.1.0.05" author="gfouquet">
		<comment>Adds an importance to test cases</comment>
		<addColumn tableName="TEST_CASE" >
			<column name="IMPORTANCE" type="VARCHAR(20)" defaultValue="LOW" remarks="The importance of the test case">
				<constraints nullable="false"/>
			</column>
		</addColumn>	
	</changeSet>

	<changeSet id="tm-1.1.0.06" author="gfouquet">
		<comment>Adds a auto compute importance property to test cases</comment>
		<addColumn tableName="TEST_CASE" >
			<column name="IMPORTANCE_AUTO" type="BOOLEAN" defaultValueBoolean="false" remarks="Should the importance be automatically computed">
				<constraints nullable="false"/>
			</column>
		</addColumn>	
	</changeSet>
	
	
	<changeSet id="tm-1.1.0-s25.01" author="bsiri">
		<comment>This table is the main table of the event logging system, in other words the history of a business entity. As for Squash TM
		version 1.1.0 and until further notice, we log here requirement modifications only. It may grows to log other entities in the future, ie test cases.
		Note : the application will fill this table itself, since we don't want triggers in the database.
		</comment>
		
		<createTable tableName="EVENT_AUDIT">
		
			<column name="EVENT_ID" type="BIGINT" autoIncrement="true" >
				<constraints primaryKey="true" nullable="false"/>				
			</column>
			
			<column name="ENTITY_ID" type="BIGINT" remarks="the ID of the target entity. As for 1.1.0 and until further notice, the target is always a requirement.">
				<constraints  nullable="false" 
				foreignKeyName="fk_event_audit_requirement" references="REQUIREMENT(RLN_ID)" />	
			</column>
			
			<column name="EVENT_DATE" type="DATETIME" remarks="the timestamp of the log entry">
				<constraints nullable="false"/>
			</column>
			
			<column name="AUTHOR" type="java.sql.Types.VARCHAR(255)" remarks="the login of the user who generated the event">
				<constraints nullable="false"/>
			</column>
		
		</createTable>
	</changeSet>
	
	
	<changeSet id="tm-1.1.0-s25.02" author="bsiri">
		<comment>It is a child table of EVENT_AUDIT. This table exists for the sole purpose of qualifying a given event in a creation event, as such its content is empty (the sheer presence
		of an entry in this table is sufficient)</comment>
		<createTable tableName="EVENT_CREATE">
			<column name="EVENT_ID" type="BIGINT"
				remarks="primary key, which is also a foreign key to EVENT_AUDIT (they share that key : do not make this table autoincrement it).">
				<constraints primaryKey="true" nullable="false" primaryKeyName="PK_EVENT_CREATE"
				foreignKeyName="fk_event_create_audit" 
				references="EVENT_AUDIT(EVENT_ID)" />		
			</column>
		</createTable>		
	</changeSet>
	
	
	<changeSet id="tm-1.1.0-s25.03" author="bsiri">
		<comment>
			This is a child table of EVENT_AUDIT. This table will log updates on the target entity. Not every operations will be logged. 
			Note 1 : As for version 1.1.0 and until further notice for the sake of simplicity we log both the former and the new value. It may change in the future.
			Note 2 : For technical reasons this table exists in two flavors. The twin table is EVENT_LARGE_PROPERTY_CHANGE. This table will log standard attributes, 
			while the other one will log blobs. 			
		</comment>
		
		<createTable tableName="EVENT_PROPERTY_CHANGE">
			<column name="EVENT_ID" type="BIGINT"
				remarks="primary key, which is also a foreign key to EVENT_AUDIT (they share that key : do not make this table autoincrement it).">
				<constraints primaryKey="true" nullable="false" primaryKeyName="PK_EVENT_PPT_CHANGE"
				foreignKeyName="fk_event_PPT_change_audit" references="EVENT_AUDIT(EVENT_ID)" />		
			</column>
			
			<column name="OLD_VALUE" type="java.sql.Types.VARCHAR(100)"  />
			
			<column name="NEW_VALUE" type="java.sql.Types.VARCHAR(100)"  />
			
			<column name="PROPERTY_NAME" type="java.sql.Types.VARCHAR(100)" />
			
		</createTable>
	
	</changeSet>
	
	<changeSet id="tm-1.1.0-s25.04" author="bsiri">
		<comment>
			This is a child table of EVENT_AUDIT. This table will log updates on the target entity. Not every operations will be logged. 
			Note 1 : As for version 1.1.0 and until further notice for the sake of simplicity we log both the former and the new value. It may change in the future.
			Note 2 : For technical reasons this table exists in two flavors. The twin table is EVENT_PROPERTY_CHANGE. This table will log blobs, 
			while the other one will log standard attributes.			
		</comment>

		<createTable tableName="EVENT_LARGE_PROPERTY_CHANGE">
			<column name="EVENT_ID" type="BIGINT"
				remarks="primary key, which is also a foreign key to EVENT_AUDIT (they share that key : do not make this table autoincrement it).">
				<constraints primaryKey="true" nullable="false" primaryKeyName="PK_LARGE_PPT_CHANGE_EVENT"
				foreignKeyName="fk_event_lPPT_change_audit" references="EVENT_AUDIT(EVENT_ID)" />		
			</column>
			
			<column name="OLD_VALUE" type="CLOB" defaultValue="NULL" />
			
			<column name="NEW_VALUE" type="CLOB" defaultValue="NULL" />
			
			<column name="PROPERTY_NAME" type="java.sql.Types.VARCHAR(100)" />
			
		</createTable>
	
	</changeSet>
	
	
	<changeSet id="tm-1.1.0-s25.05" author="bsiri">
		<comment>
			Will immediately update the tables with the create_events of existing requirements.
			Note : if you read the code below carefully and wonder why we use REQUIREMENT and REQUIREMENT_LIBRARY_NODE instead of the 
			late one alone, that's because mysql would complain because of foreign keys. 
		</comment>
		<sql>
			insert into AUDIT_EVENT (entity_id, event_date, author) 
			select r.rln_id, rln.created_on, rln.created_by  
			from REQUIREMENT_LIBRARY_NODE as rln, REQUIREMENT as r 
			where r.rln_id=rln.rln_id;		
			
			insert into EVENT_CREATE (event_id) select event_id from EVENT_AUDIT;
		</sql>
	</changeSet>

</databaseChangeLog>
 